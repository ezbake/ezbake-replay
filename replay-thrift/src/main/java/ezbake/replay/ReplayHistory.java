/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.replay;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Stores a mapping of timestamp -> request history
 */
public class ReplayHistory implements org.apache.thrift.TBase<ReplayHistory, ReplayHistory._Fields>, java.io.Serializable, Cloneable, Comparable<ReplayHistory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReplayHistory");

  private static final org.apache.thrift.protocol.TField REPLAY_HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("replayHistory", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReplayHistoryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReplayHistoryTupleSchemeFactory());
  }

  public Map<String,RequestHistory> replayHistory; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPLAY_HISTORY((short)1, "replayHistory");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPLAY_HISTORY
          return REPLAY_HISTORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPLAY_HISTORY, new org.apache.thrift.meta_data.FieldMetaData("replayHistory", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestHistory.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReplayHistory.class, metaDataMap);
  }

  public ReplayHistory() {
  }

  public ReplayHistory(
    Map<String,RequestHistory> replayHistory)
  {
    this();
    this.replayHistory = replayHistory;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReplayHistory(ReplayHistory other) {
    if (other.isSetReplayHistory()) {
      Map<String,RequestHistory> __this__replayHistory = new HashMap<String,RequestHistory>(other.replayHistory.size());
      for (Map.Entry<String, RequestHistory> other_element : other.replayHistory.entrySet()) {

        String other_element_key = other_element.getKey();
        RequestHistory other_element_value = other_element.getValue();

        String __this__replayHistory_copy_key = other_element_key;

        RequestHistory __this__replayHistory_copy_value = new RequestHistory(other_element_value);

        __this__replayHistory.put(__this__replayHistory_copy_key, __this__replayHistory_copy_value);
      }
      this.replayHistory = __this__replayHistory;
    }
  }

  public ReplayHistory deepCopy() {
    return new ReplayHistory(this);
  }

  @Override
  public void clear() {
    this.replayHistory = null;
  }

  public int getReplayHistorySize() {
    return (this.replayHistory == null) ? 0 : this.replayHistory.size();
  }

  public void putToReplayHistory(String key, RequestHistory val) {
    if (this.replayHistory == null) {
      this.replayHistory = new HashMap<String,RequestHistory>();
    }
    this.replayHistory.put(key, val);
  }

  public Map<String,RequestHistory> getReplayHistory() {
    return this.replayHistory;
  }

  public ReplayHistory setReplayHistory(Map<String,RequestHistory> replayHistory) {
    this.replayHistory = replayHistory;
    return this;
  }

  public void unsetReplayHistory() {
    this.replayHistory = null;
  }

  /** Returns true if field replayHistory is set (has been assigned a value) and false otherwise */
  public boolean isSetReplayHistory() {
    return this.replayHistory != null;
  }

  public void setReplayHistoryIsSet(boolean value) {
    if (!value) {
      this.replayHistory = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPLAY_HISTORY:
      if (value == null) {
        unsetReplayHistory();
      } else {
        setReplayHistory((Map<String,RequestHistory>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPLAY_HISTORY:
      return getReplayHistory();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPLAY_HISTORY:
      return isSetReplayHistory();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReplayHistory)
      return this.equals((ReplayHistory)that);
    return false;
  }

  public boolean equals(ReplayHistory that) {
    if (that == null)
      return false;

    boolean this_present_replayHistory = true && this.isSetReplayHistory();
    boolean that_present_replayHistory = true && that.isSetReplayHistory();
    if (this_present_replayHistory || that_present_replayHistory) {
      if (!(this_present_replayHistory && that_present_replayHistory))
        return false;
      if (!this.replayHistory.equals(that.replayHistory))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReplayHistory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReplayHistory()).compareTo(other.isSetReplayHistory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplayHistory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replayHistory, other.replayHistory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReplayHistory(");
    boolean first = true;

    sb.append("replayHistory:");
    if (this.replayHistory == null) {
      sb.append("null");
    } else {
      sb.append(this.replayHistory);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (replayHistory == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'replayHistory' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReplayHistoryStandardSchemeFactory implements SchemeFactory {
    public ReplayHistoryStandardScheme getScheme() {
      return new ReplayHistoryStandardScheme();
    }
  }

  private static class ReplayHistoryStandardScheme extends StandardScheme<ReplayHistory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReplayHistory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPLAY_HISTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.replayHistory = new HashMap<String,RequestHistory>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  RequestHistory _val3;
                  _key2 = iprot.readString();
                  _val3 = new RequestHistory();
                  _val3.read(iprot);
                  struct.replayHistory.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setReplayHistoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReplayHistory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.replayHistory != null) {
        oprot.writeFieldBegin(REPLAY_HISTORY_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.replayHistory.size()));
          for (Map.Entry<String, RequestHistory> _iter4 : struct.replayHistory.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            _iter4.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReplayHistoryTupleSchemeFactory implements SchemeFactory {
    public ReplayHistoryTupleScheme getScheme() {
      return new ReplayHistoryTupleScheme();
    }
  }

  private static class ReplayHistoryTupleScheme extends TupleScheme<ReplayHistory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReplayHistory struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.replayHistory.size());
        for (Map.Entry<String, RequestHistory> _iter5 : struct.replayHistory.entrySet())
        {
          oprot.writeString(_iter5.getKey());
          _iter5.getValue().write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReplayHistory struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.replayHistory = new HashMap<String,RequestHistory>(2*_map6.size);
        for (int _i7 = 0; _i7 < _map6.size; ++_i7)
        {
          String _key8;
          RequestHistory _val9;
          _key8 = iprot.readString();
          _val9 = new RequestHistory();
          _val9.read(iprot);
          struct.replayHistory.put(_key8, _val9);
        }
      }
      struct.setReplayHistoryIsSet(true);
    }
  }

}

