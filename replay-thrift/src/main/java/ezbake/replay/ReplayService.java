/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.replay;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReplayService {

  public interface Iface extends ezbake.base.thrift.EzBakeBaseService.Iface {

    public void replay(String uriPrefix, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.base.thrift.EzSecurityToken replayToken, String groupId, String topic, boolean replayLatestOnly, ezbake.warehaus.GetDataType type, int replayIntervalMinutes) throws org.apache.thrift.TException;

    public ezbake.replay.ReplayHistory getUserHistory(ezbake.base.thrift.EzSecurityToken token) throws NoReplayHistory, org.apache.thrift.TException;

    public void removeUserHistory(ezbake.base.thrift.EzSecurityToken token, long timestamp) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ezbake.base.thrift.EzBakeBaseService .AsyncIface {

    public void replay(String uriPrefix, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.base.thrift.EzSecurityToken replayToken, String groupId, String topic, boolean replayLatestOnly, ezbake.warehaus.GetDataType type, int replayIntervalMinutes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserHistory(ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeUserHistory(ezbake.base.thrift.EzSecurityToken token, long timestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ezbake.base.thrift.EzBakeBaseService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void replay(String uriPrefix, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.base.thrift.EzSecurityToken replayToken, String groupId, String topic, boolean replayLatestOnly, ezbake.warehaus.GetDataType type, int replayIntervalMinutes) throws org.apache.thrift.TException
    {
      send_replay(uriPrefix, start, finish, replayToken, groupId, topic, replayLatestOnly, type, replayIntervalMinutes);
    }

    public void send_replay(String uriPrefix, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.base.thrift.EzSecurityToken replayToken, String groupId, String topic, boolean replayLatestOnly, ezbake.warehaus.GetDataType type, int replayIntervalMinutes) throws org.apache.thrift.TException
    {
      replay_args args = new replay_args();
      args.setUriPrefix(uriPrefix);
      args.setStart(start);
      args.setFinish(finish);
      args.setReplayToken(replayToken);
      args.setGroupId(groupId);
      args.setTopic(topic);
      args.setReplayLatestOnly(replayLatestOnly);
      args.setType(type);
      args.setReplayIntervalMinutes(replayIntervalMinutes);
      sendBase("replay", args);
    }

    public ezbake.replay.ReplayHistory getUserHistory(ezbake.base.thrift.EzSecurityToken token) throws NoReplayHistory, org.apache.thrift.TException
    {
      send_getUserHistory(token);
      return recv_getUserHistory();
    }

    public void send_getUserHistory(ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getUserHistory_args args = new getUserHistory_args();
      args.setToken(token);
      sendBase("getUserHistory", args);
    }

    public ezbake.replay.ReplayHistory recv_getUserHistory() throws NoReplayHistory, org.apache.thrift.TException
    {
      getUserHistory_result result = new getUserHistory_result();
      receiveBase(result, "getUserHistory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserHistory failed: unknown result");
    }

    public void removeUserHistory(ezbake.base.thrift.EzSecurityToken token, long timestamp) throws org.apache.thrift.TException
    {
      send_removeUserHistory(token, timestamp);
    }

    public void send_removeUserHistory(ezbake.base.thrift.EzSecurityToken token, long timestamp) throws org.apache.thrift.TException
    {
      removeUserHistory_args args = new removeUserHistory_args();
      args.setToken(token);
      args.setTimestamp(timestamp);
      sendBase("removeUserHistory", args);
    }

  }
  public static class AsyncClient extends ezbake.base.thrift.EzBakeBaseService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void replay(String uriPrefix, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.base.thrift.EzSecurityToken replayToken, String groupId, String topic, boolean replayLatestOnly, ezbake.warehaus.GetDataType type, int replayIntervalMinutes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replay_call method_call = new replay_call(uriPrefix, start, finish, replayToken, groupId, topic, replayLatestOnly, type, replayIntervalMinutes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uriPrefix;
      private ezbake.base.thrift.DateTime start;
      private ezbake.base.thrift.DateTime finish;
      private ezbake.base.thrift.EzSecurityToken replayToken;
      private String groupId;
      private String topic;
      private boolean replayLatestOnly;
      private ezbake.warehaus.GetDataType type;
      private int replayIntervalMinutes;
      public replay_call(String uriPrefix, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.base.thrift.EzSecurityToken replayToken, String groupId, String topic, boolean replayLatestOnly, ezbake.warehaus.GetDataType type, int replayIntervalMinutes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.uriPrefix = uriPrefix;
        this.start = start;
        this.finish = finish;
        this.replayToken = replayToken;
        this.groupId = groupId;
        this.topic = topic;
        this.replayLatestOnly = replayLatestOnly;
        this.type = type;
        this.replayIntervalMinutes = replayIntervalMinutes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replay_args args = new replay_args();
        args.setUriPrefix(uriPrefix);
        args.setStart(start);
        args.setFinish(finish);
        args.setReplayToken(replayToken);
        args.setGroupId(groupId);
        args.setTopic(topic);
        args.setReplayLatestOnly(replayLatestOnly);
        args.setType(type);
        args.setReplayIntervalMinutes(replayIntervalMinutes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void getUserHistory(ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserHistory_call method_call = new getUserHistory_call(token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserHistory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      public getUserHistory_call(ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserHistory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserHistory_args args = new getUserHistory_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.replay.ReplayHistory getResult() throws NoReplayHistory, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserHistory();
      }
    }

    public void removeUserHistory(ezbake.base.thrift.EzSecurityToken token, long timestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeUserHistory_call method_call = new removeUserHistory_call(token, timestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeUserHistory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private long timestamp;
      public removeUserHistory_call(ezbake.base.thrift.EzSecurityToken token, long timestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.token = token;
        this.timestamp = timestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeUserHistory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeUserHistory_args args = new removeUserHistory_args();
        args.setToken(token);
        args.setTimestamp(timestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends ezbake.base.thrift.EzBakeBaseService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("replay", new replay());
      processMap.put("getUserHistory", new getUserHistory());
      processMap.put("removeUserHistory", new removeUserHistory());
      return processMap;
    }

    public static class replay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replay_args> {
      public replay() {
        super("replay");
      }

      public replay_args getEmptyArgsInstance() {
        return new replay_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, replay_args args) throws org.apache.thrift.TException {
        iface.replay(args.uriPrefix, args.start, args.finish, args.replayToken, args.groupId, args.topic, args.replayLatestOnly, args.type, args.replayIntervalMinutes);
        return null;
      }
    }

    public static class getUserHistory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserHistory_args> {
      public getUserHistory() {
        super("getUserHistory");
      }

      public getUserHistory_args getEmptyArgsInstance() {
        return new getUserHistory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserHistory_result getResult(I iface, getUserHistory_args args) throws org.apache.thrift.TException {
        getUserHistory_result result = new getUserHistory_result();
        try {
          result.success = iface.getUserHistory(args.token);
        } catch (NoReplayHistory e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class removeUserHistory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeUserHistory_args> {
      public removeUserHistory() {
        super("removeUserHistory");
      }

      public removeUserHistory_args getEmptyArgsInstance() {
        return new removeUserHistory_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, removeUserHistory_args args) throws org.apache.thrift.TException {
        iface.removeUserHistory(args.token, args.timestamp);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ezbake.base.thrift.EzBakeBaseService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("replay", new replay());
      processMap.put("getUserHistory", new getUserHistory());
      processMap.put("removeUserHistory", new removeUserHistory());
      return processMap;
    }

    public static class replay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replay_args, Void> {
      public replay() {
        super("replay");
      }

      public replay_args getEmptyArgsInstance() {
        return new replay_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, replay_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.replay(args.uriPrefix, args.start, args.finish, args.replayToken, args.groupId, args.topic, args.replayLatestOnly, args.type, args.replayIntervalMinutes,resultHandler);
      }
    }

    public static class getUserHistory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserHistory_args, ezbake.replay.ReplayHistory> {
      public getUserHistory() {
        super("getUserHistory");
      }

      public getUserHistory_args getEmptyArgsInstance() {
        return new getUserHistory_args();
      }

      public AsyncMethodCallback<ezbake.replay.ReplayHistory> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.replay.ReplayHistory>() { 
          public void onComplete(ezbake.replay.ReplayHistory o) {
            getUserHistory_result result = new getUserHistory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserHistory_result result = new getUserHistory_result();
            if (e instanceof NoReplayHistory) {
                        result.e = (NoReplayHistory) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserHistory_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.replay.ReplayHistory> resultHandler) throws TException {
        iface.getUserHistory(args.token,resultHandler);
      }
    }

    public static class removeUserHistory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeUserHistory_args, Void> {
      public removeUserHistory() {
        super("removeUserHistory");
      }

      public removeUserHistory_args getEmptyArgsInstance() {
        return new removeUserHistory_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, removeUserHistory_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeUserHistory(args.token, args.timestamp,resultHandler);
      }
    }

  }

  public static class replay_args implements org.apache.thrift.TBase<replay_args, replay_args._Fields>, java.io.Serializable, Cloneable, Comparable<replay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replay_args");

    private static final org.apache.thrift.protocol.TField URI_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("uriPrefix", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("finish", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REPLAY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("replayToken", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField REPLAY_LATEST_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("replayLatestOnly", org.apache.thrift.protocol.TType.BOOL, (short)7);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField REPLAY_INTERVAL_MINUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("replayIntervalMinutes", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replay_argsTupleSchemeFactory());
    }

    public String uriPrefix; // required
    public ezbake.base.thrift.DateTime start; // required
    public ezbake.base.thrift.DateTime finish; // required
    public ezbake.base.thrift.EzSecurityToken replayToken; // required
    public String groupId; // required
    public String topic; // required
    public boolean replayLatestOnly; // required
    /**
     * 
     * @see ezbake.warehaus.GetDataType
     */
    public ezbake.warehaus.GetDataType type; // required
    public int replayIntervalMinutes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URI_PREFIX((short)1, "uriPrefix"),
      START((short)2, "start"),
      FINISH((short)3, "finish"),
      REPLAY_TOKEN((short)4, "replayToken"),
      GROUP_ID((short)5, "groupId"),
      TOPIC((short)6, "topic"),
      REPLAY_LATEST_ONLY((short)7, "replayLatestOnly"),
      /**
       * 
       * @see ezbake.warehaus.GetDataType
       */
      TYPE((short)8, "type"),
      REPLAY_INTERVAL_MINUTES((short)9, "replayIntervalMinutes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URI_PREFIX
            return URI_PREFIX;
          case 2: // START
            return START;
          case 3: // FINISH
            return FINISH;
          case 4: // REPLAY_TOKEN
            return REPLAY_TOKEN;
          case 5: // GROUP_ID
            return GROUP_ID;
          case 6: // TOPIC
            return TOPIC;
          case 7: // REPLAY_LATEST_ONLY
            return REPLAY_LATEST_ONLY;
          case 8: // TYPE
            return TYPE;
          case 9: // REPLAY_INTERVAL_MINUTES
            return REPLAY_INTERVAL_MINUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPLAYLATESTONLY_ISSET_ID = 0;
    private static final int __REPLAYINTERVALMINUTES_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URI_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("uriPrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
      tmpMap.put(_Fields.FINISH, new org.apache.thrift.meta_data.FieldMetaData("finish", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
      tmpMap.put(_Fields.REPLAY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("replayToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPLAY_LATEST_ONLY, new org.apache.thrift.meta_data.FieldMetaData("replayLatestOnly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ezbake.warehaus.GetDataType.class)));
      tmpMap.put(_Fields.REPLAY_INTERVAL_MINUTES, new org.apache.thrift.meta_data.FieldMetaData("replayIntervalMinutes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replay_args.class, metaDataMap);
    }

    public replay_args() {
    }

    public replay_args(
      String uriPrefix,
      ezbake.base.thrift.DateTime start,
      ezbake.base.thrift.DateTime finish,
      ezbake.base.thrift.EzSecurityToken replayToken,
      String groupId,
      String topic,
      boolean replayLatestOnly,
      ezbake.warehaus.GetDataType type,
      int replayIntervalMinutes)
    {
      this();
      this.uriPrefix = uriPrefix;
      this.start = start;
      this.finish = finish;
      this.replayToken = replayToken;
      this.groupId = groupId;
      this.topic = topic;
      this.replayLatestOnly = replayLatestOnly;
      setReplayLatestOnlyIsSet(true);
      this.type = type;
      this.replayIntervalMinutes = replayIntervalMinutes;
      setReplayIntervalMinutesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replay_args(replay_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUriPrefix()) {
        this.uriPrefix = other.uriPrefix;
      }
      if (other.isSetStart()) {
        this.start = new ezbake.base.thrift.DateTime(other.start);
      }
      if (other.isSetFinish()) {
        this.finish = new ezbake.base.thrift.DateTime(other.finish);
      }
      if (other.isSetReplayToken()) {
        this.replayToken = new ezbake.base.thrift.EzSecurityToken(other.replayToken);
      }
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
      if (other.isSetTopic()) {
        this.topic = other.topic;
      }
      this.replayLatestOnly = other.replayLatestOnly;
      if (other.isSetType()) {
        this.type = other.type;
      }
      this.replayIntervalMinutes = other.replayIntervalMinutes;
    }

    public replay_args deepCopy() {
      return new replay_args(this);
    }

    @Override
    public void clear() {
      this.uriPrefix = null;
      this.start = null;
      this.finish = null;
      this.replayToken = null;
      this.groupId = null;
      this.topic = null;
      setReplayLatestOnlyIsSet(false);
      this.replayLatestOnly = false;
      this.type = null;
      setReplayIntervalMinutesIsSet(false);
      this.replayIntervalMinutes = 0;
    }

    public String getUriPrefix() {
      return this.uriPrefix;
    }

    public replay_args setUriPrefix(String uriPrefix) {
      this.uriPrefix = uriPrefix;
      return this;
    }

    public void unsetUriPrefix() {
      this.uriPrefix = null;
    }

    /** Returns true if field uriPrefix is set (has been assigned a value) and false otherwise */
    public boolean isSetUriPrefix() {
      return this.uriPrefix != null;
    }

    public void setUriPrefixIsSet(boolean value) {
      if (!value) {
        this.uriPrefix = null;
      }
    }

    public ezbake.base.thrift.DateTime getStart() {
      return this.start;
    }

    public replay_args setStart(ezbake.base.thrift.DateTime start) {
      this.start = start;
      return this;
    }

    public void unsetStart() {
      this.start = null;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return this.start != null;
    }

    public void setStartIsSet(boolean value) {
      if (!value) {
        this.start = null;
      }
    }

    public ezbake.base.thrift.DateTime getFinish() {
      return this.finish;
    }

    public replay_args setFinish(ezbake.base.thrift.DateTime finish) {
      this.finish = finish;
      return this;
    }

    public void unsetFinish() {
      this.finish = null;
    }

    /** Returns true if field finish is set (has been assigned a value) and false otherwise */
    public boolean isSetFinish() {
      return this.finish != null;
    }

    public void setFinishIsSet(boolean value) {
      if (!value) {
        this.finish = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getReplayToken() {
      return this.replayToken;
    }

    public replay_args setReplayToken(ezbake.base.thrift.EzSecurityToken replayToken) {
      this.replayToken = replayToken;
      return this;
    }

    public void unsetReplayToken() {
      this.replayToken = null;
    }

    /** Returns true if field replayToken is set (has been assigned a value) and false otherwise */
    public boolean isSetReplayToken() {
      return this.replayToken != null;
    }

    public void setReplayTokenIsSet(boolean value) {
      if (!value) {
        this.replayToken = null;
      }
    }

    public String getGroupId() {
      return this.groupId;
    }

    public replay_args setGroupId(String groupId) {
      this.groupId = groupId;
      return this;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public String getTopic() {
      return this.topic;
    }

    public replay_args setTopic(String topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public boolean isReplayLatestOnly() {
      return this.replayLatestOnly;
    }

    public replay_args setReplayLatestOnly(boolean replayLatestOnly) {
      this.replayLatestOnly = replayLatestOnly;
      setReplayLatestOnlyIsSet(true);
      return this;
    }

    public void unsetReplayLatestOnly() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLAYLATESTONLY_ISSET_ID);
    }

    /** Returns true if field replayLatestOnly is set (has been assigned a value) and false otherwise */
    public boolean isSetReplayLatestOnly() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLAYLATESTONLY_ISSET_ID);
    }

    public void setReplayLatestOnlyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLAYLATESTONLY_ISSET_ID, value);
    }

    /**
     * 
     * @see ezbake.warehaus.GetDataType
     */
    public ezbake.warehaus.GetDataType getType() {
      return this.type;
    }

    /**
     * 
     * @see ezbake.warehaus.GetDataType
     */
    public replay_args setType(ezbake.warehaus.GetDataType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public int getReplayIntervalMinutes() {
      return this.replayIntervalMinutes;
    }

    public replay_args setReplayIntervalMinutes(int replayIntervalMinutes) {
      this.replayIntervalMinutes = replayIntervalMinutes;
      setReplayIntervalMinutesIsSet(true);
      return this;
    }

    public void unsetReplayIntervalMinutes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLAYINTERVALMINUTES_ISSET_ID);
    }

    /** Returns true if field replayIntervalMinutes is set (has been assigned a value) and false otherwise */
    public boolean isSetReplayIntervalMinutes() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLAYINTERVALMINUTES_ISSET_ID);
    }

    public void setReplayIntervalMinutesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLAYINTERVALMINUTES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URI_PREFIX:
        if (value == null) {
          unsetUriPrefix();
        } else {
          setUriPrefix((String)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((ezbake.base.thrift.DateTime)value);
        }
        break;

      case FINISH:
        if (value == null) {
          unsetFinish();
        } else {
          setFinish((ezbake.base.thrift.DateTime)value);
        }
        break;

      case REPLAY_TOKEN:
        if (value == null) {
          unsetReplayToken();
        } else {
          setReplayToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((String)value);
        }
        break;

      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((String)value);
        }
        break;

      case REPLAY_LATEST_ONLY:
        if (value == null) {
          unsetReplayLatestOnly();
        } else {
          setReplayLatestOnly((Boolean)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((ezbake.warehaus.GetDataType)value);
        }
        break;

      case REPLAY_INTERVAL_MINUTES:
        if (value == null) {
          unsetReplayIntervalMinutes();
        } else {
          setReplayIntervalMinutes((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URI_PREFIX:
        return getUriPrefix();

      case START:
        return getStart();

      case FINISH:
        return getFinish();

      case REPLAY_TOKEN:
        return getReplayToken();

      case GROUP_ID:
        return getGroupId();

      case TOPIC:
        return getTopic();

      case REPLAY_LATEST_ONLY:
        return Boolean.valueOf(isReplayLatestOnly());

      case TYPE:
        return getType();

      case REPLAY_INTERVAL_MINUTES:
        return Integer.valueOf(getReplayIntervalMinutes());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URI_PREFIX:
        return isSetUriPrefix();
      case START:
        return isSetStart();
      case FINISH:
        return isSetFinish();
      case REPLAY_TOKEN:
        return isSetReplayToken();
      case GROUP_ID:
        return isSetGroupId();
      case TOPIC:
        return isSetTopic();
      case REPLAY_LATEST_ONLY:
        return isSetReplayLatestOnly();
      case TYPE:
        return isSetType();
      case REPLAY_INTERVAL_MINUTES:
        return isSetReplayIntervalMinutes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replay_args)
        return this.equals((replay_args)that);
      return false;
    }

    public boolean equals(replay_args that) {
      if (that == null)
        return false;

      boolean this_present_uriPrefix = true && this.isSetUriPrefix();
      boolean that_present_uriPrefix = true && that.isSetUriPrefix();
      if (this_present_uriPrefix || that_present_uriPrefix) {
        if (!(this_present_uriPrefix && that_present_uriPrefix))
          return false;
        if (!this.uriPrefix.equals(that.uriPrefix))
          return false;
      }

      boolean this_present_start = true && this.isSetStart();
      boolean that_present_start = true && that.isSetStart();
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (!this.start.equals(that.start))
          return false;
      }

      boolean this_present_finish = true && this.isSetFinish();
      boolean that_present_finish = true && that.isSetFinish();
      if (this_present_finish || that_present_finish) {
        if (!(this_present_finish && that_present_finish))
          return false;
        if (!this.finish.equals(that.finish))
          return false;
      }

      boolean this_present_replayToken = true && this.isSetReplayToken();
      boolean that_present_replayToken = true && that.isSetReplayToken();
      if (this_present_replayToken || that_present_replayToken) {
        if (!(this_present_replayToken && that_present_replayToken))
          return false;
        if (!this.replayToken.equals(that.replayToken))
          return false;
      }

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_replayLatestOnly = true;
      boolean that_present_replayLatestOnly = true;
      if (this_present_replayLatestOnly || that_present_replayLatestOnly) {
        if (!(this_present_replayLatestOnly && that_present_replayLatestOnly))
          return false;
        if (this.replayLatestOnly != that.replayLatestOnly)
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_replayIntervalMinutes = true;
      boolean that_present_replayIntervalMinutes = true;
      if (this_present_replayIntervalMinutes || that_present_replayIntervalMinutes) {
        if (!(this_present_replayIntervalMinutes && that_present_replayIntervalMinutes))
          return false;
        if (this.replayIntervalMinutes != that.replayIntervalMinutes)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUriPrefix()).compareTo(other.isSetUriPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUriPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uriPrefix, other.uriPrefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFinish()).compareTo(other.isSetFinish());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinish()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish, other.finish);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplayToken()).compareTo(other.isSetReplayToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplayToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replayToken, other.replayToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplayLatestOnly()).compareTo(other.isSetReplayLatestOnly());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplayLatestOnly()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replayLatestOnly, other.replayLatestOnly);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplayIntervalMinutes()).compareTo(other.isSetReplayIntervalMinutes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplayIntervalMinutes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replayIntervalMinutes, other.replayIntervalMinutes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replay_args(");
      boolean first = true;

      sb.append("uriPrefix:");
      if (this.uriPrefix == null) {
        sb.append("null");
      } else {
        sb.append(this.uriPrefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      if (this.start == null) {
        sb.append("null");
      } else {
        sb.append(this.start);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("finish:");
      if (this.finish == null) {
        sb.append("null");
      } else {
        sb.append(this.finish);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("replayToken:");
      if (this.replayToken == null) {
        sb.append("null");
      } else {
        sb.append(this.replayToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("replayLatestOnly:");
      sb.append(this.replayLatestOnly);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("replayIntervalMinutes:");
      sb.append(this.replayIntervalMinutes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (start != null) {
        start.validate();
      }
      if (finish != null) {
        finish.validate();
      }
      if (replayToken != null) {
        replayToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replay_argsStandardSchemeFactory implements SchemeFactory {
      public replay_argsStandardScheme getScheme() {
        return new replay_argsStandardScheme();
      }
    }

    private static class replay_argsStandardScheme extends StandardScheme<replay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URI_PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uriPrefix = iprot.readString();
                struct.setUriPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.start = new ezbake.base.thrift.DateTime();
                struct.start.read(iprot);
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FINISH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.finish = new ezbake.base.thrift.DateTime();
                struct.finish.read(iprot);
                struct.setFinishIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REPLAY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.replayToken = new ezbake.base.thrift.EzSecurityToken();
                struct.replayToken.read(iprot);
                struct.setReplayTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupId = iprot.readString();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topic = iprot.readString();
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // REPLAY_LATEST_ONLY
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.replayLatestOnly = iprot.readBool();
                struct.setReplayLatestOnlyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = ezbake.warehaus.GetDataType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // REPLAY_INTERVAL_MINUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.replayIntervalMinutes = iprot.readI32();
                struct.setReplayIntervalMinutesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uriPrefix != null) {
          oprot.writeFieldBegin(URI_PREFIX_FIELD_DESC);
          oprot.writeString(struct.uriPrefix);
          oprot.writeFieldEnd();
        }
        if (struct.start != null) {
          oprot.writeFieldBegin(START_FIELD_DESC);
          struct.start.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.finish != null) {
          oprot.writeFieldBegin(FINISH_FIELD_DESC);
          struct.finish.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.replayToken != null) {
          oprot.writeFieldBegin(REPLAY_TOKEN_FIELD_DESC);
          struct.replayToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.groupId != null) {
          oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.groupId);
          oprot.writeFieldEnd();
        }
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          oprot.writeString(struct.topic);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REPLAY_LATEST_ONLY_FIELD_DESC);
        oprot.writeBool(struct.replayLatestOnly);
        oprot.writeFieldEnd();
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REPLAY_INTERVAL_MINUTES_FIELD_DESC);
        oprot.writeI32(struct.replayIntervalMinutes);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replay_argsTupleSchemeFactory implements SchemeFactory {
      public replay_argsTupleScheme getScheme() {
        return new replay_argsTupleScheme();
      }
    }

    private static class replay_argsTupleScheme extends TupleScheme<replay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUriPrefix()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetFinish()) {
          optionals.set(2);
        }
        if (struct.isSetReplayToken()) {
          optionals.set(3);
        }
        if (struct.isSetGroupId()) {
          optionals.set(4);
        }
        if (struct.isSetTopic()) {
          optionals.set(5);
        }
        if (struct.isSetReplayLatestOnly()) {
          optionals.set(6);
        }
        if (struct.isSetType()) {
          optionals.set(7);
        }
        if (struct.isSetReplayIntervalMinutes()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetUriPrefix()) {
          oprot.writeString(struct.uriPrefix);
        }
        if (struct.isSetStart()) {
          struct.start.write(oprot);
        }
        if (struct.isSetFinish()) {
          struct.finish.write(oprot);
        }
        if (struct.isSetReplayToken()) {
          struct.replayToken.write(oprot);
        }
        if (struct.isSetGroupId()) {
          oprot.writeString(struct.groupId);
        }
        if (struct.isSetTopic()) {
          oprot.writeString(struct.topic);
        }
        if (struct.isSetReplayLatestOnly()) {
          oprot.writeBool(struct.replayLatestOnly);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetReplayIntervalMinutes()) {
          oprot.writeI32(struct.replayIntervalMinutes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.uriPrefix = iprot.readString();
          struct.setUriPrefixIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = new ezbake.base.thrift.DateTime();
          struct.start.read(iprot);
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.finish = new ezbake.base.thrift.DateTime();
          struct.finish.read(iprot);
          struct.setFinishIsSet(true);
        }
        if (incoming.get(3)) {
          struct.replayToken = new ezbake.base.thrift.EzSecurityToken();
          struct.replayToken.read(iprot);
          struct.setReplayTokenIsSet(true);
        }
        if (incoming.get(4)) {
          struct.groupId = iprot.readString();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.topic = iprot.readString();
          struct.setTopicIsSet(true);
        }
        if (incoming.get(6)) {
          struct.replayLatestOnly = iprot.readBool();
          struct.setReplayLatestOnlyIsSet(true);
        }
        if (incoming.get(7)) {
          struct.type = ezbake.warehaus.GetDataType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(8)) {
          struct.replayIntervalMinutes = iprot.readI32();
          struct.setReplayIntervalMinutesIsSet(true);
        }
      }
    }

  }

  public static class getUserHistory_args implements org.apache.thrift.TBase<getUserHistory_args, getUserHistory_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserHistory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserHistory_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserHistory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserHistory_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserHistory_args.class, metaDataMap);
    }

    public getUserHistory_args() {
    }

    public getUserHistory_args(
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserHistory_args(getUserHistory_args other) {
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getUserHistory_args deepCopy() {
      return new getUserHistory_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getUserHistory_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserHistory_args)
        return this.equals((getUserHistory_args)that);
      return false;
    }

    public boolean equals(getUserHistory_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserHistory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserHistory_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserHistory_argsStandardSchemeFactory implements SchemeFactory {
      public getUserHistory_argsStandardScheme getScheme() {
        return new getUserHistory_argsStandardScheme();
      }
    }

    private static class getUserHistory_argsStandardScheme extends StandardScheme<getUserHistory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserHistory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserHistory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserHistory_argsTupleSchemeFactory implements SchemeFactory {
      public getUserHistory_argsTupleScheme getScheme() {
        return new getUserHistory_argsTupleScheme();
      }
    }

    private static class getUserHistory_argsTupleScheme extends TupleScheme<getUserHistory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getUserHistory_result implements org.apache.thrift.TBase<getUserHistory_result, getUserHistory_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserHistory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserHistory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserHistory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserHistory_resultTupleSchemeFactory());
    }

    public ezbake.replay.ReplayHistory success; // required
    public NoReplayHistory e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.replay.ReplayHistory.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserHistory_result.class, metaDataMap);
    }

    public getUserHistory_result() {
    }

    public getUserHistory_result(
      ezbake.replay.ReplayHistory success,
      NoReplayHistory e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserHistory_result(getUserHistory_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.replay.ReplayHistory(other.success);
      }
      if (other.isSetE()) {
        this.e = new NoReplayHistory(other.e);
      }
    }

    public getUserHistory_result deepCopy() {
      return new getUserHistory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ezbake.replay.ReplayHistory getSuccess() {
      return this.success;
    }

    public getUserHistory_result setSuccess(ezbake.replay.ReplayHistory success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NoReplayHistory getE() {
      return this.e;
    }

    public getUserHistory_result setE(NoReplayHistory e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.replay.ReplayHistory)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((NoReplayHistory)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserHistory_result)
        return this.equals((getUserHistory_result)that);
      return false;
    }

    public boolean equals(getUserHistory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserHistory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserHistory_resultStandardSchemeFactory implements SchemeFactory {
      public getUserHistory_resultStandardScheme getScheme() {
        return new getUserHistory_resultStandardScheme();
      }
    }

    private static class getUserHistory_resultStandardScheme extends StandardScheme<getUserHistory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserHistory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.replay.ReplayHistory();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new NoReplayHistory();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserHistory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserHistory_resultTupleSchemeFactory implements SchemeFactory {
      public getUserHistory_resultTupleScheme getScheme() {
        return new getUserHistory_resultTupleScheme();
      }
    }

    private static class getUserHistory_resultTupleScheme extends TupleScheme<getUserHistory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ezbake.replay.ReplayHistory();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new NoReplayHistory();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class removeUserHistory_args implements org.apache.thrift.TBase<removeUserHistory_args, removeUserHistory_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeUserHistory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUserHistory_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUserHistory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUserHistory_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public long timestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      TIMESTAMP((short)2, "timestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // TIMESTAMP
            return TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUserHistory_args.class, metaDataMap);
    }

    public removeUserHistory_args() {
    }

    public removeUserHistory_args(
      ezbake.base.thrift.EzSecurityToken token,
      long timestamp)
    {
      this();
      this.token = token;
      this.timestamp = timestamp;
      setTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUserHistory_args(removeUserHistory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      this.timestamp = other.timestamp;
    }

    public removeUserHistory_args deepCopy() {
      return new removeUserHistory_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setTimestampIsSet(false);
      this.timestamp = 0;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public removeUserHistory_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long getTimestamp() {
      return this.timestamp;
    }

    public removeUserHistory_args setTimestamp(long timestamp) {
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      return this;
    }

    public void unsetTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case TIMESTAMP:
        return Long.valueOf(getTimestamp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case TIMESTAMP:
        return isSetTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUserHistory_args)
        return this.equals((removeUserHistory_args)that);
      return false;
    }

    public boolean equals(removeUserHistory_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_timestamp = true;
      boolean that_present_timestamp = true;
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (this.timestamp != that.timestamp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeUserHistory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUserHistory_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUserHistory_argsStandardSchemeFactory implements SchemeFactory {
      public removeUserHistory_argsStandardScheme getScheme() {
        return new removeUserHistory_argsStandardScheme();
      }
    }

    private static class removeUserHistory_argsStandardScheme extends StandardScheme<removeUserHistory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUserHistory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUserHistory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUserHistory_argsTupleSchemeFactory implements SchemeFactory {
      public removeUserHistory_argsTupleScheme getScheme() {
        return new removeUserHistory_argsTupleScheme();
      }
    }

    private static class removeUserHistory_argsTupleScheme extends TupleScheme<removeUserHistory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUserHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
        if (struct.isSetTimestamp()) {
          oprot.writeI64(struct.timestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUserHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timestamp = iprot.readI64();
          struct.setTimestampIsSet(true);
        }
      }
    }

  }

}
